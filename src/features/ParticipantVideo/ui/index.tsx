import React, { useEffect, useRef, useState } from 'react';
import '../style/participantVideo.scss';

interface ParticipantVideoProps {
  stream: MediaStream;
  nickname: string;
  avatarUrl?: string;
  isGuest?: boolean;
}

const ParticipantVideo: React.FC<ParticipantVideoProps> = ({
  stream,
  nickname,
  avatarUrl,
  isGuest,
}) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [status, setStatus] = useState<string>('‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

  useEffect(() => {
    const videoEl = videoRef.current;
    if (!videoEl) {
      return;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫
    videoEl.srcObject = stream;

    // –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∫–ª—é—á–∞–µ–º –∑–≤—É–∫
    videoEl.muted = false;
    videoEl.volume = 1;

    const tryPlay = async () => {
      try {
        await videoEl.play();
        setStatus('‚úÖ –í–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å –∞—É–¥–∏–æ');
      } catch (err) {
        setStatus('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–∑–∞–ø—É—Å—Ç–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–µ–Ω –∫–ª–∏–∫)');
        console.warn('Autoplay blocked:', err);
      }
    };

    tryPlay();

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–∫–∞
    if (!stream.active) {
      setStatus('‚ùå –ü–æ—Ç–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
    }

    const tracks = stream.getTracks();
    if (tracks.length === 0) {
      setStatus('‚ùå –í –ø–æ—Ç–æ–∫–µ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤');
    } else {
      const info = tracks.map(
        (t) => `${t.kind}: ${t.readyState} ${t.enabled ? 'üü¢' : 'üî¥'}`,
      );
      console.log(`üéß Tracks for ${nickname}:`, info);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ—Ç–æ–∫–∞
    const onInactive = () => setStatus('‚ùå –ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    const onAddTrack = (e: any) => {
      console.log('üé¨ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫:', e.track.kind);
      setStatus('üé¨ –ü–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω');
      tryPlay();
    };

    stream.addEventListener?.('inactive', onInactive);
    stream.addEventListener?.('addtrack', onAddTrack);

    return () => {
      stream.removeEventListener?.('inactive', onInactive);
      stream.removeEventListener?.('addtrack', onAddTrack);
    };
  }, [stream, nickname]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ
  useEffect(() => {
    const videoEl = videoRef.current;
    if (!videoEl) {
      return;
    }

    const onPlaying = () => {
      console.log(`‚úÖ –í–∏–¥–µ–æ ${nickname} —Ä–µ–∞–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç`);
      setStatus('‚úÖ –í–∏–¥–µ–æ —Ä–µ–∞–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç');
    };
    const onError = (e: any) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –≤–∏–¥–µ–æ:', e);
      setStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏');
    };

    videoEl.addEventListener('playing', onPlaying);
    videoEl.addEventListener('error', onError);

    return () => {
      videoEl.removeEventListener('playing', onPlaying);
      videoEl.removeEventListener('error', onError);
    };
  }, [nickname]);

  return (
    <div className="ParticipantVideo">
      <video
        key={stream.id} // –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ—Ç–æ–∫–∞ React —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        ref={videoRef}
        autoPlay
        playsInline
        className="ParticipantVideo__player"
      />

      <div className="ParticipantVideo__info">
        {avatarUrl && (
          <img
            src={avatarUrl}
            alt={nickname}
            className="ParticipantVideo__avatar"
          />
        )}
        <span className="ParticipantVideo__name">
          {nickname} {isGuest && '(–ì–æ—Å—Ç—å)'}
        </span>
        <div className="ParticipantVideo__status">{status}</div>
      </div>
    </div>
  );
};

export default ParticipantVideo;
