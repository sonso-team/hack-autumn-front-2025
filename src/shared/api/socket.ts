// socket.ts
import type { Socket } from 'socket.io-client';
import { io } from 'socket.io-client';

class SocketService {
  private static instance: SocketService;
  private socket: Socket | null = null;

  private constructor() {}

  static getInstance(): SocketService {
    if (!SocketService.instance) {
      SocketService.instance = new SocketService();
    }
    return SocketService.instance;
  }

  connect(serverUrl: string): Socket {
    if (!this.socket) {
      this.socket = io(serverUrl, {
        transports: ['websocket'], // –±—ã—Å—Ç—Ä–µ–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ
      });

      this.socket.on('connect', () => {
        console.log('üü¢ –°–æ–∫–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω:', this.socket?.id);
      });

      this.socket.on('disconnect', (reason) => {
        console.log('üî¥ –°–æ–∫–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
      });
    }
    return this.socket;
  }

  getSocket(): Socket {
    if (!this.socket) {
      throw new Error('‚ùå –°–æ–∫–µ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –í—ã–∑–æ–≤–∏—Ç–µ Connect().');
    }
    return this.socket;
  }

  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
    }
  }
}

export const socketService = SocketService.getInstance();
